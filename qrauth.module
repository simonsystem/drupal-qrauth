<?php
/**
 * Implement hook_help() to display a small help message
 * if somebody clicks the "Help" link on the modules list.
 */
function qrauth_help( $path, $arg )
{
    switch ( $path )
    {
        case 'admin/help#qrauth':
            return( '<p>' . t('This module allows users who login with e-mail addresses to authenticate off an external system.') . '</p>' );
    }
}



/**
 * Implement hook_form_alter() to change the behaviour of the login form.
 *
 * Login validators are set in the user_login_default_validators() function in user.module.
 * They are normally set to array('user_login_name_validate',
 * 'user_login_authenticate_validate', 'user_login_final_validate').
 * We simply replace 'user_login_authenticate_validate' with 'extauth_login_validate'.
 */

function qrauth_form_alter(&$form, $form_state, $form_id)
{
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    unset($form['links']);
    $form['#validate'] = array( 'user_login_name_validate', 'qrauth_login_validate', 'user_login_final_validate' );
    $form['qrauth_qrcode'] = array('#type' => 'hidden', '#value' => generateQrCode());
    $form['#attached'] = array(
      'js' => array(
        libraries_get_path('jquery.qrcode') . '/jquery.qrcode-0.11.0.js',
        drupal_get_path('module', 'qrauth') . '/qrauth.js',
      ),
    );
  }
}

/**
 * The extauth_login_validate() function attempts to authenticate a user off the external system
 * using their e-mail address.
 */
function qrauth_login_validate( $form, &$form_state )
{
    global $user;

    $qrcode = $form_state['values']['qrauth_qrcode'];
    unset($form_state['values']['qrauth_qrcode']);

    if ( $qrcode ) {
        $uid = db_select('qrauth_qrcode', 'qr')
            ->fields('qr')
            ->condition('qrcode', $qrcode)
            ->execute()
            ->fetchAssoc()['uid'];
        if ($uid) {
            // Log user in.
            $form_state['uid'] = $uid;
            user_login_submit(array(), $form_state);
        } // else drop through to the end and return nothing - Drupal will handle the rejection
    }
    else {
        // No qrcode passed, so use standard Drupal authentication function
        user_login_authenticate_validate( $form, $form_state );
    }
}


/**
 * The extauth_login_validate() function attempts to authenticate a user off the external system
 * using their e-mail address.
 */
function generateQrCode( )
{
    $qrcode = base64_encode(drupal_random_bytes(12));
    db_insert('qrauth_qrcode')
        ->fields(array(
            'qrcode' => $qrcode,
            'uid' => 0,
            'deadline' => REQUEST_TIME + 5 * 60,
        ))
        ->execute();
    return $qrcode;
}


/**
 * Implements hook_permission().
 *
 * Since the access to our new custom pages will be granted based on
 * special permissions, we need to define what those permissions are here.
 * This ensures that they are available to enable on the user role
 * administration pages.
 */
function qrauth_permission() {
  return array(
    'access arguments page' => array(
      'title' => t('Access page with arguments'),
      'description' => t('Allow users to access page with arguments'),
    ),
  );
}

/**
 * A more complex page callback that takes arguments.
 *
 * This callback is mapped to the path 'examples/page_example/arguments/%/%'.
 *
 * The % arguments are passed in from the page URL. In our hook_menu
 * implementation we instructed the menu system to extract the last two
 * parameters of the path and pass them to this function as arguments.
 *
 *
 * Consult @link http://drupal.org/node/930760 Render Arrays documentation
 * @endlink for details.
 */
function qrauth_authenticate($qrcode) {
  global $user;
  $uid = db_select('qrauth_qrcode', 'qr')
      ->fields('qr')
      ->condition('qrcode', $qrcode)
      ->execute()
      ->fetchAssoc()['uid'];

  if ($uid === '0') {
    db_update('qrauth_qrcode')
      ->condition('qrcode', $qrcode)
      ->fields(array(
        'uid' => $user->uid,
      ))
     ->execute();
  }
  else {
    // We will just show a standard "access denied" page in this case.
    drupal_access_denied();
    // We actually don't get here.
    return;
  }

  $render_array['qrauth_authenticate'] = array(
    // The theme function to apply to the #items.
    '#theme' => 'item_list',
    // The list itself.
    '#items' => array("hallo"),
    '#title' => t('Argument Information'),
  );
  return $render_array;
}

/**
 * A more complex page callback that takes arguments.
 *
 * This callback is mapped to the path 'examples/page_example/arguments/%/%'.
 *
 * The % arguments are passed in from the page URL. In our hook_menu
 * implementation we instructed the menu system to extract the last two
 * parameters of the path and pass them to this function as arguments.
 *
 *
 * Consult @link http://drupal.org/node/930760 Render Arrays documentation
 * @endlink for details.
 */
function qrauth_wait($qrcode) {
  $uid = db_select('qrauth_qrcode', 'qr')
      ->fields('qr')
      ->condition('qrcode', $qrcode)
      ->execute()
      ->fetchAssoc()['uid'];
  if ($uid) {
    // Log user in.
    $form_state['uid'] = $uid;
    user_login_submit(array(), $form_state);
  } // else drop through to the end and return nothing - Drupal will handle the rejection
  
  drupal_json_output($uid);
  return;
}

/**
 * Implements hook_menu().
 *
 * Because hook_menu() registers URL paths for items defined by the function, it
 * is necessary for modules that create pages. Each item can also specify a
 * callback function for a given URL. The menu items returned here provide this
 * information to the menu system.
 *
 * We will define some menus, and their paths will be interpreted as follows:
 *
 * @see hook_menu()
 * @see menu_example
 */
function qrauth_menu() {
  // By using the MENU_CALLBACK type, we can register the callback for this
  // path without the item appearing in the menu; the admin cannot enable the
  // item in the menu, either.
  //
  // Notice that 'page arguments' is an array of numbers. These will be
  // replaced with the corresponding parts of the menu path. In this case a 0
  // would be replaced by 'example', a 1 by 'page_example', and a 2 by
  // 'arguments.' 3 and 4 will be replaced by whatever the user provides.
  // These will be passed as arguments to the page_example_arguments() function.
  $items['qrauth/%'] = array(
    'page callback' => 'qrauth_authenticate',
    'page arguments' => array(1),
    'access arguments' => array('access arguments page'),
    'type' => MENU_CALLBACK,
  );
  $items['qrwait/%'] = array(
    'page callback' => 'qrauth_wait',
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}
