<?php
/**
 * Implement hook_help() to display a small help message
 * if somebody clicks the "Help" link on the modules list.
 */
function qrauth_help( $path, $arg )
{
    switch ( $path )
    {
        case 'admin/help#qrauth':
        {
            return( '<p>' . t('This module allows users who login with e-mail addresses to authenticate off an external system.') . '</p>' );
        }
    }
}

/**
* Implementation of hook_install().
*/
function qrauth_install() {
// Use schema API to create database table.
drupal_install_schema('qrauth_qrcode');
}



/**
* Implementation of hook_uninstall().
*/
function qrauth_uninstall() {
// Remove tables.
drupal_uninstall_schema('qrauth_qrcode');
}


/**
* Implementation of hook_schema().
*/
function social_site_schema() {
    $schema['qrauth_qrcode'] = array(
        'description' => t('Stores qrcodes and uids of the qrauth module.'),
        'fields' => array(
            'qrcode' => array(
                'description' => 'The primary qrcode.',
                'type' => 'varchar',
                'length' => 32,
                'not null' => TRUE
            ),
            'uid' => array(
                'description' => 'The {users}.uid that authentication this qrcode; initially, this is null',
                'type' => 'int',
                'not null' => TRUE,
                'default' => 0,
            )
        ),
        'primary key' => array('type'),
        'foreign keys' => array(
            'qrauth-authenticator' => array(
                'table' => 'users',
                'columns' => array('uid' => 'uid'),
            )
        )
    );
    return $schema;
}

/**
 * Implement hook_form_alter() to change the behaviour of the login form.
 *
 * Login validators are set in the user_login_default_validators() function in user.module.
 * They are normally set to array('user_login_name_validate',
 * 'user_login_authenticate_validate', 'user_login_final_validate').
 * We simply replace 'user_login_authenticate_validate' with 'extauth_login_validate'.
 */

function qrauth_form_alter(&$form, $form_state, $form_id)
{
  print_r("kas");
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    unset($form['links']);
    $form['#validate'] = array( 'user_login_name_validate', 'qrauth_login_validate', 'user_login_final_validate' );
    $form['qrcode'] = array('#type' => 'hidden', '#value' => generateQrCode());
  }
}

/**
 * The extauth_login_validate() function attempts to authenticate a user off the external system
 * using their e-mail address.
 */
function qrauth_login_validate( $form, &$form_state )
{
    global $user;

    $qrcode = $form_state['values']['qrcode'];
    unset($form_state['values']['qrcode']);

    if ( $qrcode ) {
        $uid = db_select('qrauth_qrcode', 'qr')
            ->condition('qrcode', $qrcode)
            ->fields('uid')
            ->execute()
            ->fetchField('uid');
        if ($uid) {
            // Log user in.
            $form_state['uid'] = $uid;
            user_login_submit(array(), $form_state);
        } // else drop through to the end and return nothing - Drupal will handle the rejection
    }
    else {
        // No qrcode passed, so use standard Drupal authentication function
        user_login_authenticate_validate( $form, $form_state );
    }
}


/**
 * The extauth_login_validate() function attempts to authenticate a user off the external system
 * using their e-mail address.
 */
function generateQrCode( )
{
    $qrcode = substr(base64(mt_rand()), 0, 15);
    return $qrcode;
}
