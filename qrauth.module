<?php
/**
 * Implement hook_help() to display a small help message
 */
function qrauth_help( $path, $arg )
{
  switch ($path) {
    case 'admin/help#qrauth':
        return( '<p>' . t('This module allows users who login using QrAuth Authentication Mechanism.') . '</p>' );
  }
}



/**
 * Implement hook_form_alter() to change the behaviour of the login form.
 *
 * Login validators are set in the user_login_default_validators() function in user.module.
 * They are normally set to array('user_login_name_validate',
 * 'user_login_authenticate_validate', 'user_login_final_validate').
 * We simply replace 'user_login_authenticate_validate' with 'extauth_login_validate'.
 */

function qrauth_form_alter(&$form, $form_state, $form_id)
{
  if ($form_id == 'user_login_block' || $form_id == 'user_login') {
    $form['qrauth_qrcode'] = array('#type' => 'hidden', '#value' => db_create_qrcode());
    $form['#attached'] = array(
      'js' => array(
        libraries_get_path('jquery.qrcode') . '/jquery.qrcode-0.11.0.js',
        drupal_get_path('module', 'qrauth') . '/qrauth.js',
      ),
    );
  }
}

/**
 * Generate a random qrcode identifier.
 *
 * @return the generated qrcode
 */
function random_qrcode( )
{
    return substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 16);
}

/**
 * Create a qrcode authentication request, which will wait for authentication through a logged-in user.
 *
 * This request will be deleted after 5 minutes, unless it became authentificated.
 *
 * @return the generated qrcode
 */
function db_create_qrcode()
{
  $qrcode = random_qrcode();
  db_insert('qrauth_qrcode')
    ->fields(array(
      'qrcode' => $qrcode,
      'uid' => 0,
      'deadline' => REQUEST_TIME + 1* 60,
    ))
    ->execute();
  return $qrcode;
}

/**
 * Delete request.
 *
 * Deletes a given request indentifed by qrcode.
 *
 * @param $qrcode which indentifies this request
 */
function db_delete_qrcode($qrcode)
{
  db_delete('qrauth_qrcode')
    ->condition('qrcode', $qrcode)
    ->execute();
}

/**
 * Delete deprecated requests.
 *
 * Deletes all request which dealines are reached.
 *
 */
function db_delete_deprecated_qrcodes()
{
  db_delete('qrauth_qrcode')
    ->condition('deadline', REQUEST_TIME, '<')
    ->execute();
}


/**
 * Get this request as assoc. 
 *
 * @param $qrcode which indentifies this request
 * @return array which holds the information
 */
function db_get($qrcode)
{
  return db_select('qrauth_qrcode', 'qr')
    ->fields('qr')
    ->condition('qrcode', $qrcode)
    ->execute()
    ->fetchAssoc();
}

/**
 * Set the uid of the user who authenticates this request. 
 *
 * @param $qrcode which indentifies this request
 * @param $uid of the authentication user
 */
function db_set_uid($qrcode, $uid)
{
  db_update('qrauth_qrcode')
    ->condition('qrcode', $qrcode)
    ->fields(array(
      'uid' => $uid,
    ))
   ->execute();
}


/**
 * Implements hook_permission().
 *
 */
function qrauth_permission() 
{
  return array(
    'access qrauth authenticate' => array(
      'title' => t('QrAuth Authentication Mechanism'),
      'description' => t('Allow users to authenticate other clients with qrauth.'),
    ),
  );
}

/**
 * The page callback implementing the authentication.
 *
 * This callback is mapped to the path 'qrauth/%'.
 *
 */
function qrauth_authenticate($qrcode)
{

  global $user;
  $uid = db_get($qrcode)['uid'];

  if ($uid === '0') {
    db_set_uid($qrcode, $user->uid);
    drupal_set_message("Authentication was successful. UID: " . $user->uid);

    drupal_goto('');
    return;
  }
  else {
    // We will just show a standard "access denied" page in this case.
    drupal_not_found();
    // We actually don't get here.
    return;
  }
}

/**
 * The page callback implementing waiting.
 *
 * This callback is mapped to the path 'qrwait/%'.
 *
 */
function qrauth_wait($qrcode)
{
  $obj = db_get($qrcode);
  $uid = $obj['uid'];
  $deadline = $obj['deadline'];

  if ($uid) {
    // Log user in.
    $form_state['uid'] = $uid;
    user_login_submit(array(), $form_state);
    db_delete_qrcode($qrcode);
    drupal_json_output(array(
      'authenticated' => 1,
      'uid' => $uid,
    ));
    return;
  }
  elseif ($deadline < REQUEST_TIME) {
    db_delete_qrcode($qrcode);
    drupal_json_output(array(
      'authenticated' => 0,
      'deleted' => 1,
    ));
    return;
  }
  else {
    drupal_json_output(array(
      'authenticated' => 0,
      'deleted' => 0,
    ));
    return;
  }
}

/**
 * Implements hook_menu().
 *
 * We will define some menus, and their paths will be interpreted as follows:
 *
 * @see hook_menu()
 * @see menu_example
 */
function qrauth_menu()
{
  $items['qrauth/%'] = array(
    'page callback' => 'qrauth_authenticate',
    'page arguments' => array(1),
    'access arguments' => array('access qrauth authenticate'),
    'type' => MENU_CALLBACK,
  );
  $items['qrwait/%'] = array(
    'page callback' => 'qrauth_wait',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_cron().
 */
/*
function qrauth_cron() {
  // Default to an hourly interval. Of course, cron has to be running at least
  // hourly for this to work.
  $interval = variable_get('qrauth_interval', 60 * 60);
  // We usually don't want to act every time cron runs (which could be every
  // minute) so keep a time for the next run in a variable.
  if (time() >= variable_get('qrauth_next_execution', 0)) {
    db_delete_deprecated_qrcodes();
    variable_set('qrauth_next_execution', time() + $interval);
  }
}
*/
